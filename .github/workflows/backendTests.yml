name: Laravel Tests

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version'
        required: true
        type: string
      npm-version:
        description: 'NPM version'
        required: true
        type: string
      php-version:
        description: 'PHP version'
        required: true
        type: string
jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql-test:
        image: mysql:8.1
        env:
          MYSQL_ROOT_PASSWORD: "password"
          MYSQL_DATABASE: "ttsband"
          MYSQL_USER: "tts"
          MYSQL_PASSWORD: "password"
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"

      - uses: actions/checkout@v3

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Update .env
        run: |
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env.testing

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.7.0"

      - name: Install specific npm version
        run: npm install -g npm@10.8.2

      - name: Cache node_modules and composer dependencies
        uses: actions/cache@v4
        id: cache-node-and-composer
        with:
          path: |
            ~/.composer/cache
            **/vendor
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        if: steps.cache-node-and-composer.outputs.cache-hit != 'true'
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies
        if: steps.cache-node-and-composer.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Build assets
        run: npm run build

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Cache wkhtmltopdf
        uses: actions/cache@v4
        id: cache-wkhtmltopdf
        with:
          path: /usr/bin/wkhtmltopdf
          key: ${{ runner.os }}-wkhtmltopdf-permanent

      - name: Install wkhtmltopdf
        if: steps.cache-wkhtmltopdf.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf

      - name: Execute tests via Artisan
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1 
        run: php artisan test
